import random
import threading
import time
import matplotlib.pyplot as plt

# Define servers with weights and active connections
servers = [
    {'name': 'Server1', 'weight': 2, 'connections': 0, 'handled': 0},
    {'name': 'Server2', 'weight': 1, 'connections': 0, 'handled': 0},
    {'name': 'Server3', 'weight': 3, 'connections': 0, 'handled': 0},
]

# Simulate 20 client requests
requests = ['Request' + str(i) for i in range(1, 21)]

# ---------- Round Robin ----------
print("----- Round Robin Load Balancing -----")
server_index = 0
for req in requests:
    assigned_server = servers[server_index]['name']
    print(f"{req} --> {assigned_server}")
    server_index = (server_index + 1) % len(servers)

# ---------- Random Selection ----------
print("\n----- Random Selection Load Balancing -----")
for req in requests:
    assigned_server = random.choice(servers)['name']
    print(f"{req} --> {assigned_server}")

# ---------- Weighted Round Robin ----------
print("\n----- Weighted Round Robin Load Balancing -----")
# Expand servers based on weights
weighted_servers = []
for server in servers:
    weighted_servers.extend([server['name']] * server['weight'])

server_index = 0
for req in requests:
    assigned_server = weighted_servers[server_index]
    print(f"{req} --> {assigned_server}")
    server_index = (server_index + 1) % len(weighted_servers)

# ---------- Least Connections (Basic) ----------
print("\n----- Least Connections Load Balancing -----")
# Reset connections
for server in servers:
    server['connections'] = 0

for req in requests:
    least_conn_server = min(servers, key=lambda s: s['connections'])
    least_conn_server['connections'] += 1
    print(f"{req} --> {least_conn_server['name']}")

print("\nFinal connections per server:")
for server in servers:
    print(f"{server['name']}: {server['connections']} connections")

# ---------- Least Connections with Threading ----------
print("\n----- Least Connections Load Balancing with Threads -----")

# Reset connections and handled count
for server in servers:
    server['connections'] = 0
    server['handled'] = 0

# Define how each request is processed (with delay)
def process_request(server, req):
    server['connections'] += 1
    server['handled'] += 1
    print(f"{req} --> {server['name']} (processing...)")
    time.sleep(random.uniform(1, 3))
    server['connections'] -= 1
    print(f"{req} --> {server['name']} (completed)")

threads = []
for req in requests:
    least_conn_server = min(servers, key=lambda s: s['connections'])
    t = threading.Thread(target=process_request, args=(least_conn_server, req))
    threads.append(t)
    t.start()

# Wait for all threads to finish
for t in threads:
    t.join()

# Final stats
print("\nFinal handled requests per server:")
for server in servers:
    print(f"{server['name']}: {server['handled']} requests")

# ---------- Plotting ----------
server_names = [server['name'] for server in servers]
handled_counts = [server['handled'] for server in servers]

plt.bar(server_names, handled_counts, color=['blue', 'green', 'orange'])
plt.title('Requests Handled by Each Server')
plt.xlabel('Server')
plt.ylabel('Number of Requests')
plt.show()



